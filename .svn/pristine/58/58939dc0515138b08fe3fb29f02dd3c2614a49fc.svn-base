<template>
  <div class="zongzhi__left">
    <div class="item">
      <div class="item__title">设备类别</div>
      <div class="item__cotent col2">
        <div class="col" v-for="(item,index) in sblb" :key="index">
          <i class="icon"></i>
          <span class="title">{{item.device_name}}</span>
          <span class="numms">{{item.num}}</span>
          <!-- <span class="count">{{count}}</span> -->
        </div>
      </div>
    </div>
    <div class="item">
      <div class="item__title">最近事件数</div>
      <div class="item__cotent" id="item__cotents" ref="ljsm"></div>
    </div>
    <div class="item">
      <div class="item__title">昨日事件</div>
      <div class="item__cotent col1">
        <div class="col title">
          <span class="address">小区</span>
          <span class="type">类型</span>
          <span class="date">时间</span>
        </div>
        <div class="col" v-for="({sbazdz,sbqc, sj},index) in todayEventList" :key="index">
          <span class="address" :title="sbazdz">{{sbazdz}}</span>
          <span class="type" :title="sbqc">{{sbqc}}</span>
          <span class="date">{{sj?sj.split(" ")[1]:""}}</span>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import echarts from "echarts";
import options from "../options";
export default {
  data() {
    return {
      chart_yjtj: null,
      sblb: [],
      todayEventList: [],
      initChart_ljsms:[]
    };
  },
  mounted() {
    this.initChart_ljsm();
    this.getZZDevice();
    this.getTodayEventList();
  },
  methods: {
    /**
     * 获取设备类别数据
     */
    getZZDevice() {
      this.$axios
        .get(process.env.API_ROOT + "/index/Equipments/getZZDevice")
        .then(res => {
          if (res) {
            this.sblb = res.data.data || [];
          } else {
            // this.$message.error("初始化设备类别数据失败！");
          }
          console.log(res.data.data)
        })
        .catch(err => {
          // this.$message.error("初始化设备类别数据失败！");
          console.log(err);
        });
    },
    /**
     * 初始化垃圾扫码分析
     */
    initChart_ljsm() {
      this.$axios
        .get(process.env.API_ROOT + "/index/Equipments/getSaoMa")
        .then(res => {
          if (res) {
            console.log(res)
            res.data.data = res.data.data.reverse()
            // res.data.data = res.data.data.reverse()
            this.initChart_ljsms.push(res.data.data);
            console.log(this.initChart_ljsms[0]);
            this.Echarts.init(document.getElementById('item__cotents')).dispose();
            var myChart = this.Echarts.init(document.getElementById('item__cotents'));
          //                var data = [{
          //     value:48,
          //     name: '公共设施'
          // }, {
          //     value: 13,
          //     name: '道路交通设施'
          // }, {
          //     value: 12,
          //     name: '园林绿化设施'
          // }, {
          //     value: 22,
          //     name: '基础设施'
          // }];
        var xdata=[];
        var ydata=[];
        var sundata='';
        for (var i = 0; i < this.initChart_ljsms[0].length; i++) {
            xdata.push((this.initChart_ljsms[0])[i].name);
            ydata.push(parseInt((this.initChart_ljsms[0])[i].value));
        }
        console.log(xdata,ydata)
        function sum(arr) {
          return eval(arr.join("+"));
        };
        sundata=sum(ydata);

var option = {
    tooltip: {},
    grid: {
        top: '8%',
        left: '1%',
        right: '1%',
        bottom: '8%',
        containLabel: true,
    },
    legend: {
        itemGap: 50,
        data: [''],
        textStyle: {
            color: '#f9f9f9',
            borderColor: '#fff'
        },
    },
    xAxis: [{
        type: 'category',
        boundaryGap: true,
        axisLine: { //坐标轴轴线相关设置。数学上的x轴
            show: true,
            lineStyle: {
                color: '#f9f9f9'
            },
        },
        axisLabel: { //坐标轴刻度标签的相关设置
            textStyle: {
                color: '#d1e6eb',
                margin: 15,
            },
        },
        axisTick: {
            show: false,
        },
        data: xdata,
    }],
    yAxis: [{
        type: 'value',
        min: 0,
        // max: 140,
        splitNumber: 7,
        splitLine: {
            show: true,
            lineStyle: {
                color: '#0a3256'
            }
        },
        axisLine: {
            show: false,
        },
        axisLabel: {
            margin: 20,
            textStyle: {
                color: '#d1e6eb',

            },
        },
        axisTick: {
            show: false,
        },
    }],
    series: [{
        name: '',
        type: 'line',
        // smooth: true, //是否平滑曲线显示
        // 			symbol:'circle',  // 默认是空心圆（中间是白色的），改成实心圆
        showAllSymbol: true,
        symbol: 'emptyCircle',
        symbolSize: 6,
        lineStyle: {
            normal: {
                color: "#28ffb3", // 线条颜色
            },
            borderColor: '#f0f'
        },
        label: {
            show: true,
            position: 'top',
            textStyle: {
                color: '#fff',
            }
        },
        itemStyle: {
            normal: {
                color: "#28ffb3",

            }
        },
        tooltip: {
            show: false
        },
        areaStyle: { //区域填充样式
            normal: {
                //线性渐变，前4个参数分别是x0,y0,x2,y2(范围0~1);相当于图形包围盒中的百分比。如果最后一个参数是‘true’，则该四个值是绝对像素位置。
                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                        offset: 0,
                        color: 'rgba(0,154,120,1)'
                    },
                    {
                        offset: 1,
                        color: 'rgba(0,0,0, 0)'
                    }
                ], false),
                shadowColor: 'rgba(53,142,215, 0.9)', //阴影颜色
                shadowBlur: 20 //shadowBlur设图形阴影的模糊大小。配合shadowColor,shadowOffsetX/Y, 设置图形的阴影效果。
            }
        },
        data: ydata
    }]
};
            myChart.clear();
            myChart.setOption(option);
            // const data =
            //   res.data.data.map(({ areaname: name, scancode }) => {
            //     return {
            //       value: 1,
            //       name,
            //       scancode
            //     };
            //   }) || [];
            // let {
            //   legend,
            //   series: [series]
            // } = options.chart_ljsm;
            // legend = { ...legend, data: data.map(({ name }) => name) };
            // series = [{ ...series, data }];
            // this.chart_ljsm = echarts.init(this.$refs.ljsm);
            // this.chart_ljsm.setOption({
            //   ...options.chart_ljsm,
            //   legend,
            //   series
            // });
          } else {
            // this.$message.error("初始化垃圾扫码数据失败！");
          }
        })
        .catch(err => {
          // this.$message.error("初始化垃圾扫码数据失败！");
          // console.log(err);
        });
    },
    /**
     * 获取今日事件
     */
    getTodayEventList() {
      this.$axios
        .get(process.env.API_ROOT + "/index/Equipments/getWarnInfo")
        .then(res => {
          if (res) {
            // console.log(res)
            this.todayEventList = res.data.data || [];
          } else {
            // this.$message.error("初始化垃圾扫码数据失败！");
          }
        })
        .catch(err => {
          // this.$message.error("初始化垃圾扫码数据失败！");
          // console.log(err);
        });
    }
  }
};
</script>
<style lang="scss" scoped>
.zongzhi__left {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 469px;
  padding: 76px 0 0 16px;
  box-sizing: border-box;
  color: #fff;
  font-family: "AlibabaPuHuiTiM";
  .item {
    width: 100%;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-size: 100% 100%;
    background-image: url("../img/item__bg.png");
    margin: 5px 0;
    padding: 6px;
    box-sizing: border-box;
    .item__title {
      width: 100%;
      height: 40px;
      text-align: center;
      display: flex;
      justify-content: center;
      align-items: center;
      &::before,
      &:after {
        content: "";
        display: block;
        width: 60px;
        height: 40px;
        background-image: url("../img/title__icon.png");
        background-size: 60px 40px;
        background-position: center;
      }
      &:after {
        transform: rotateY(180deg);
      }
    }
    .item__cotent {
      width: 100%;
      flex: 1;
      box-sizing: border-box;
      overflow-x: hidden;
      overflow-y: auto;
      &.col2 {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: flex-start;
        .col {
          display: flex;
          justify-items: flex-start;
          align-items: center;
          width: 50%;
          height: 48px;
          background-size: 100% 100%;
          background-image: url("../img/col2__itemBg-left.png");
          box-sizing: border-box;
          font-size: 14px;
          &.active {
            background-image: url("../img/col2__itemBg-left--active.png");
          }
          &:nth-child(2n) {
            background-image: url("../img/col3__itemBg-right.png");
            &.active {
              background-image: url("../img/col3__itemBg-right--active.png");
            }
          }
          .icon {
            width: 24px;
            height: 24px;
            margin: 0 1em;
          }
          .title {
            display: block;
            width: 150px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }
          .numms{
            display: inline-block;
            margin: 0 50px 0 20px;
            font-size: 20px;
            font-weight: bold;
            color: #F1E207;
          }
          .count {
            font-size: 18px;
            font-family: "DINAlternate-Bold";
            font-weight: bold;
            color: #fff661;
          }
        }
      }
      &.col1 {
        margin-bottom: 10px;
        padding: 0 10px;
        .col {
          position: relative;
          display: flex;
          justify-items: flex-start;
          align-items: center;
          width: 100%;
          height: 36px;
          background-size: 100% 100%;
          color: rgba(254, 254, 254, 1);
          box-sizing: border-box;
          font-size: 12px;
          margin: 4px 0;
          padding: 0 2em;
          &:not(.title) {
            background-image: url("../img/col1__itemBg.png");
          }
          &.active {
            background-image: url("../img/col1__itemBg--active.png");
          }
          &.title {
            position: sticky;
            top: 0;
            color: rgba(207, 235, 249, 1);
            background: #001124;
            z-index: 1;
            margin-top: 0;
          }
          span {
            width: 25%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }
          .address {
            width: 50%;
          }
        }
      }
    }
  }
}
</style>