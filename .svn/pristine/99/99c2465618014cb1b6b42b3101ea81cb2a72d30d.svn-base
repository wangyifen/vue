<template>
  <div class="home">
    <div class="headtitle" @click="home()"
    ></div>
    <div class="left-content common-content">
      <div>
        <div class="echart_title"><span></span><span>扬尘统计</span><span></span></div>
        <div
          id="left-echart1"
          class="echart_content"
        ></div>
      </div>
      <div>
        <div class="echart_title"><span></span><span>扬尘浓度热力图</span><span></span></div>
        <div
          id="smallMap"
          class="smallMap"
        ></div>
      </div>
      <div>
        <div class="echart_title"><span></span><span>趋势分析</span><span></span></div>
        <div
          id="left-echart2"
          class="echart_content"
        ></div>
      </div>
    </div>
    <middle></middle>
    <div class="right-content common-content">
      <div>
        <div class="echart_title"><span></span><span>河道预警</span><span></span></div>
        <div class="warn-content">
          <div class="list-title">
            <div class="list-palce">河道地点</div>
            <div class="list-type">描述</div>
          </div>
          <div
            :class="warnId == item.name?'list-select list':'list-unselect list'"
            v-for="(item,index) in warnList"
            :key="index"
            @click="selectList(item)"
          >
            <div
              class="list-palce"
              :title="item.name"
            >{{item.name}}</div>
            <div
              class="list-type"
              :title="item.content"
            >{{item.content}}</div>
          </div>
        </div>
      </div>
      <div>
        <div class="echart_title"><span></span><span>河道监测</span><span></span></div>
        <div class="river-course">
          <div
            class="river-list"
            v-for="(item,index) in riverList"
            :key="index"
          >
            <div class="river-title">{{item.collector_name}}</div>
            <div class="river-content">
              <div class="river-item">
                <div>{{item.phvalue}}</div>
                <div>ph值</div>
              </div>
              <div class="river-item">
                <div>{{item.dovalue}}</div>
                <div>溶解度</div>
              </div>
              <div class="river-item">
                <div>{{item.ecvalue}}</div>
                <div>电导率</div>
              </div>
              <div class="river-item">
                <div>{{item.orpvalue}}</div>
                <div>氧化还原</div>
              </div>
              <div class="river-item">
                <div>{{item.nhvalue}}</div>
                <div>氨氮</div>
              </div>
              <div class="river-item">
                <div>{{item.tempvalue}}</div>
                <div>水温</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <weather></weather>
  </div>
</template>
<script>
import middle from "../home/v21/v21.vue";
import weather from "../weather/index.vue";
export default {
  inject: ["reload"],
  data() {
    return {
      warnList: [
        {
          name: '',
          content:''
        }
      ],
      riverList: [
        {
          phvalue: '',
          dovalue: '',
          ecvalue: '',
          orpvalue: '',
          nhvalue: '',
          tempvalue: ''
        }
      ],
      warnId: ''
    };
  },
  components: {
    middle,
    weather
  },
  mounted() {
    this.getRoundFC();
    this.getFCQST();
    this.getWaterAbnormalType();
    this.getWaterValue();
    this.getFCThermalDiagram();
  },
  methods: {
    home() {
      // this.reload()
      this.$router.push('./home')
    },
    selectList(item) {
      this.warnId = item.id;
    },
    //河道预警
    getWaterAbnormalType() {
      this.$axios.post(process.env.API_ROOT + '/index/Publicmanager/getWaterAbnormalType', {
        time: 'month'
      }).then((res) => {
        // console.log(res)
        var res = res.data;
        if (res.code == 0) {
          this.warnList = res.data;
        }
      })
    },
    //河道监测
    getWaterValue() {
      this.$axios.post(process.env.API_ROOT + '/index/Publicmanager/getWaterValue').then((res) => {
        var res = res.data;
        if (res.code == 0) {
          this.riverList = res.data;
        }
      })
    },
    //扬尘统计
    getRoundFC() {
      this.$axios.post(process.env.API_ROOT + '/index/Publicmanager/getRoundFC', this.$qs.stringify({
        time: 'yesterday'
      })).then((res) => {
        var res = res.data;
        if (res.code == 0) {
          var data = [];
          res.data.forEach(e => {
            data.push({
              name: e.sitename,
              value: Number(e.count)
            })
          });
          this.leftEchart1(data);
        }
      })
    },
    //趋势分析
    getFCQST() {
      this.$axios.post(process.env.API_ROOT + '/index/Publicmanager/getFCQST').then((res) => {
        var res = res.data;
        if (res.code == 0) {
          var data = [], xdata = [];
          res.data.forEach(e => {
            data.push(Number(e.count));
            xdata.push(e.time);
          });
          this.leftEchart2(data, xdata);
        }
      })
    },
    leftEchart1(data) {
      this.Echarts.init(document.getElementById("left-echart1")).dispose();
      var myChart = this.Echarts.init(document.getElementById("left-echart1"));
      var xData = [],
        yData = [];
      var min = 0;
      data.map(function (a, b) {
        xData.push(a.name);
        if (a.value === 0) {
          yData.push(a.value + min);
        } else {
          yData.push(a.value);
        }
      });
      var option = {
        color: ["#3398DB"],
        tooltip: {
          trigger: "axis",
          axisPointer: {
            type: "line",
            lineStyle: {
              opacity: 0
            }
          },
          formatter: function (prams) {
            if (prams[0].data === min) {
              return "次数：0";
            } else {
              return "次数：" + prams[0].data;
            }
          }
        },
        grid: {
          left: "2%",
          right: "0%",
          bottom: "0%",
          top: "12%",
          height: "90%",
          containLabel: true,
          z: 22
        },
        xAxis: [
          {
            type: "category",
            gridIndex: 0,
            data: xData,
            axisTick: {
              alignWithLabel: true
            },
            axisLine: {
              lineStyle: {
                color: "#0c3b71"
              }
            },
            axisLabel: {
              show: true,
              color: "#fff",
              fontSize: 14,
              interval: 0,
              formatter: function (value) {
                return value.split("").join("\n");
              }
            }
          }
        ],
        yAxis: [
          {
            name: "扬尘次数",
            type: "value",
            gridIndex: 0,
            splitLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            min: min,
            // max: 100,
            axisLine: {
              lineStyle: {
                color: "#fff"
              }
            },
            axisLabel: {
              color: "#fff",
              formatter: "{value}"
            }
          },
          {
            type: "value",
            gridIndex: 0,
            min: min,
            max: 100,
            splitNumber: 12,
            splitLine: {
              show: false
            },
            axisLine: {
              show: false
            },
            axisTick: {
              show: false
            },
            axisLabel: {
              show: false
            },
            splitArea: {
              show: true,
              areaStyle: {
                color: ["rgba(250,250,250,0.0)", "rgba(250,250,250,0.05)"]
              }
            }
          }
        ],
        series: [
          {
            name: "扬尘次数",
            type: "bar",
            barWidth: "30%",
            xAxisIndex: 0,
            yAxisIndex: 0,
            itemStyle: {
              normal: {
                barBorderRadius: 30,
                color: new this.Echarts.graphic.LinearGradient(0, 0, 0, 1, [
                  {
                    offset: 0,
                    color: "#FF7835"
                  },
                  {
                    offset: 1,
                    color: "#00A5FF"
                  }
                ])
              }
            },
            data: yData,
            zlevel: 11
          },
        ]
      };
      myChart.clear();
      myChart.setOption(option);
    },
    leftEchart2(data, xdata) {
      var data = data;
      var xdata = xdata;
      this.Echarts.init(document.getElementById("left-echart2")).dispose();
      var myChart = this.Echarts.init(document.getElementById("left-echart2"))
      var option = {
        // backgroundColor: '#424956',
        // title: {
        //     text: '请求数',
        //     textStyle: {
        //         fontWeight: 'normal',
        //         fontSize: 16,
        //         color: '#F1F1F3'
        //     },
        //     left: '6%'
        // },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            lineStyle: {
              color: '#57617B'
            }
          }
        },
        grid: {
          left: '3%',
          right: '7%',
          bottom: '3%',
          top: '12%',
          containLabel: true
        },
        xAxis: [{
          type: 'category',
          boundaryGap: false,
          axisLine: {
            lineStyle: {
              color: '#cdcdcd'
            }
          },
          data: xdata
        }],
        yAxis: [{
          type: 'value',
          name: '粉尘浓度',
          axisTick: {
            show: false
          },
          axisLine: {
            lineStyle: {
              color: '#fff'
            }
          },
          axisLabel: {
            margin: 10,
            textStyle: {
              fontSize: 14
            }
          },
          splitLine: {
            show: false,
            lineStyle: {
              color: '#57617B'
            }
          }
        }],
        series: [{
          name: '',
          type: 'line',
          smooth: true,
          symbol: 'circle',
          symbolSize: 12,
          showSymbol: true,
          lineStyle: {
            normal: {
              width: 3
            }
          },
          areaStyle: {
            normal: {
              color: new this.Echarts.graphic.LinearGradient(0, 0, 1, 0, [{
                offset: 0,
                color: 'rgba(16,97,204, 0.2)'
              }, {
                offset: 0.8,
                color: 'rgba(17,235,210, 0.2)'
              }], false),
              shadowColor: 'rgba(0, 0, 0, 0.1)',
              shadowBlur: 10
            }
          },
          itemStyle: {
            normal: {
              opacity: 0.5,
              label: {
                show: true,
                color: 'white'
              },
              color: new this.Echarts.graphic.LinearGradient(0, 0, 1, 0, [{
                offset: 0,
                color: '#3BA3F4'
              }, {
                offset: 1,
                color: '#FF7E3F'
              }])
            },
            emphasis: {
              color: 'rgb(0,196,132)',
              borderColor: 'rgba(0,196,132,0.2)',
              extraCssText: 'box-shadow: 8px 8px 8px rgba(0, 0, 0, 1);',
              borderWidth: 10
            }
          },
          data: data
        }]
      };
      myChart.clear();
      myChart.setOption(option)
    },
    //热力图
    getFCThermalDiagram() {
      this.$axios.post(process.env.API_ROOT + '/index/Publicmanager/getFCThermalDiagram').then((res) => {
        var res = res.data;
        if (res.code == 0) {
          var datas = [];
          res.data.forEach(e => {
            datas.push({ "lng": e.gdjd, "lat": e.gdwd, "count": Number(e.avgvalue) });
          });
          var data = {
            data: datas
          };
          this.toggleShow(data);
        }
      })
    },
    toggleShow(datas) {
      var map, heatmapOverlay, circles = [];
      map = new IMAP.Map("smallMap", {
        minZoom: 4,
        zoom: 11,//设置地图初始化级别
        center: new IMAP.LngLat(121.391990831164, 31.301459147136),//设置地图中心点坐标
        animation: true//设置地图缩放动画效果
      });
      var ROADNET_URL = "http://" + host + ":25033/v3/tile?x={x}&y={y}&z={z}";
      var getRoadTileUrl = function (x, y, z) {
        return ROADNET_URL.replace("{x}", x).replace("{y}", y).replace("{z}", z);
      }
      var RoadLayer = new IMAP.TileLayer({
        maxZoom: 23,
        minZoom: 3,
        tileSize: 256
      });
      RoadLayer.setTileUrlFunc(getRoadTileUrl);
      RoadLayer.setOpacity(0.9); //设置图层透明度，取值范围0-1
      map.addLayer(RoadLayer);
      if (map && !heatmapOverlay) {
        map.plugin(['IMAP.HeatmapOverlay'], function () {
          heatmapOverlay = new IMAP.HeatmapOverlay(datas);
          map.getOverlayLayer().addOverlay(heatmapOverlay);
        });
      }
    }
  },
};
</script>
<style lang='less' scoped>
// @import "./environment.less";
body {
    margin: 0;
    padding: 0;
  }
  .home {
    width: 1920px;
    height: 1080px;
    margin: 0px;
    padding: 0px;
    position: absolute;
    left: 0;
    top: 0;
    background-size: 100% 100%;
    background-image: url("../../assets/img/bkg.png");
    .headtitle {
      width: 100%;
      height: 76px;
      position: absolute;
      left: 0;
      top: 0px;
      cursor: pointer;
      background-size: 100% 100%;
      background-image: url("../../assets/img/head_bg.png");
    }
    .left-content {
      position: absolute;
      left: 11px;
      top: 77px;
    }
    .right-content {
      position: absolute;
        right: 13px;
        top: 77px;
    }
    .common-content {
        margin: 0;
        padding: 0;
        width: 465px;
        height: 91%;
        position: absolute;
        display: flex;
        flex-direction: column;
        > div {
            flex: 1;
            background: url("../../assets/img/left_bk.png") no-repeat;
            background-size: 100% 100%;
            margin-bottom: 14px;
            .echart_title{
                text-align: center;
                color: white;
                margin: 0 auto!important;
                padding-top: 19px;
                font-size: 14px;
                display: flex;
                justify-content: center;
                align-items: center;
                span:nth-child(1){
                    width: 13px;
                    height: 12px;
                    margin-top:1px; 
                    background-image:url('./img/titles_left.png');
                    background-size:100% 100%;  
                }
                span:nth-child(2) {
                    margin: 0 25px;
                }
                span:nth-child(3){
                    width: 13px;
                    height: 12px;
                    margin-top:1px; 
                    background-image:url('./img/titles_right.png');
                    background-size:100% 100%;  
                }
            }
            .echart_content {
                height: 85%;
                padding: 0 15px;
            }
            .warn-content {
                padding: 0 15px;
                display: flex;
                flex-direction: column;
                height: 90%;
                overflow: auto;
                max-height: 410px;
                .list-title {
                    display: flex;
                    font-weight:400;
                    color:rgba(200,236,251,1);
                    line-height:55px;
                    font-size: 16px;
                    .list-palce {
                        padding-left: 20px;
                        width: 35%;
                    }
                    .list-type {
                        width: 65%;
                    }
                }
                .list {
                    display: flex;
                    line-height: 36px;
                    margin-bottom: 4px;
                    font-size: 12px;
                    color:rgba(254,254,254,1);
                    .list-palce {
                        padding-left: 20px;
                        width: 40%;
                        overflow:hidden;
                        text-overflow:ellipsis; 
                        white-space: nowrap;
                        max-width: 140px;
                    }
                    .list-type {
                        padding-right: 20px;
                        width: 60%;
                        overflow:hidden;
                        text-overflow:ellipsis; 
                        white-space: nowrap;
                        max-width: 260px;
                    }
                }
                .list-unselect {
                    background:url('./img/listbk.png') no-repeat;
                    background-size: 100% 100%;
                }
                .list-select {
                    background:url('./img/listbk_select.png') no-repeat;
                    background-size: 100% 100%;
                }
            }
            .river-course {
                padding: 0 15px;
                display: flex;
                flex-direction: column;
                height: 90%;
                overflow: auto;
                max-height: 410px;
                .river-list {
                    display: flex;
                    flex-direction: column;
                    margin-top: 20px;
                    .river-title {
                        font-size: 14px;
                        color:#c8ecfb;
                        text-align: center;
                        margin-bottom: 10px;
                    }
                    .river-content {
                        display: flex;
                        justify-content: space-between;
                        .river-item {
                            font-size: 12px;
                            color: #ffffff;
                            div:nth-child(1) {
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                width: 60px;
                                height: 60px;
                                border: 5px solid #4694FF;
                                border-radius: 60px;
                                background:rgba(0,33,74,0.8);
                            }
                            div:nth-child(2) {
                                margin-top: 10px;
                                text-align: center;
                            }
                        }
                    }
                }
            }
            .smallMap {
                margin: 0 auto;
                width: 95%;
                height: 85%;
            }
        }
        > div:last-child {
            margin-bottom: 0;
        }
    }
  }
  .bounce-enter-active {
    animation: bounce-in 0.6s;
  }
  .bounce-leave-active {
    animation: bounce-out 0.4s;
  }
  @keyframes bounce-in {
    0% {
      transform: scale(0);
      margin-left: 100%;
    }
    100% {
      margin-left: 0;
      transform: scale(1);
    }
  }
  @keyframes bounce-out {
    0% {
      margin-left: 0;
      transform: scale(1);
    }
    100% {
      margin-left: -100%;
      transform: scale(0);
    }
  }
</style>

